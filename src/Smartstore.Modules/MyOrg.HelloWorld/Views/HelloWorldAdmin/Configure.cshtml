@model ConfigurationModel

@{
	Layout = "_ConfigureModule";
}

@* 
    Render "StoreScope" component if your setting class has 
    one or more multi-store enabled properties.
    It renders a store chooser that sets the current store scope.
    This way individual settings can be overridden on store level.
*@

@await Component.InvokeAsync("StoreScope")

@* Render the save button in admin toolbar *@
<widget target-zone="admin_button_toolbar_before">
	<button id="SaveConfigButton" type="submit" name="save" class="btn btn-warning" value="save">
		<i class="fa fa-check"></i>
		<span>@T("Admin.Common.Save")</span>
	</button>
</widget>

<form asp-action="Configure">
	<div asp-validation-summary="All"></div>
	<div class="adminContent">
		<div class="adminRow">
			<div class="adminTitle">
				<smart-label asp-for="Name" />
			</div>
			<div class="adminData">
				<setting-editor asp-for="Name"></setting-editor>
				<span asp-validation-for="Name"></span>
			</div>
		</div>
	</div>
</form>